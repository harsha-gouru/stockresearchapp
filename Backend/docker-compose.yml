version: '3.8'

services:
  # Stock Trading App Backend
  app:
    build: .
    container_name: stock-app-backend
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: stock_app_user
      DATABASE_PASSWORD: stock_app_password
      DATABASE_NAME: stock_trading_app
      DATABASE_URL: postgresql://stock_app_user:stock_app_password@postgres:5432/stock_trading_app
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-jwt-secret-change-in-production-12345
      JWT_REFRESH_SECRET: development-refresh-secret-change-in-production-67890
      CORS_ORIGINS: http://localhost:5173,http://localhost:3000
    ports:
      - "3000:3000"
    networks:
      - stock-app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./src:/app/src:ro
      - ./sql:/app/sql:ro

  postgres:
    image: postgres:15-alpine
    container_name: stock-app-postgres
    environment:
      POSTGRES_DB: stock_trading_app
      POSTGRES_USER: stock_app_user
      POSTGRES_PASSWORD: stock_app_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - stock-app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stock_app_user -d stock_trading_app"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: stock-app-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock-app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Optional: Redis Commander for Redis GUI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: stock-app-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - stock-app-network
    depends_on:
      - redis
    profiles:
      - tools

  # Optional: pgAdmin for PostgreSQL GUI
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: stock-app-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@stockapp.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - stock-app-network
    depends_on:
      - postgres
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  stock-app-network:
    driver: bridge
